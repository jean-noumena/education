openapi: 3.0.0
info:
  title: Project Seed OpenAPI Spec
  version: 0.0.1
  description: Seed project for getting started with standardised Noumena architecture (OAuth2)
  license:
    name: privately licensed
    url: http://todo

servers:
  - url: http://localhost:8080
    description: local docker environment
  - url: https://api.seed-dev.noumenadigital.com
    description: DEV environment

components:

  securitySchemes:
    auth:
      type: oauth2
      flows:
        password:
          tokenUrl: /auth/login
          refreshUrl: /auth/refresh
          scopes: { }
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    AccessToken:
      description: An AccessToken provides all the required information to make authorized calls and to obtain fresh tokens.
      type: object
      properties:
        access_token:
          type: string
          description: JWT token to use for subsequent access.
          example: "verylong.access.token"
        token_type:
          type: string
          enum:
            - bearer
        expires_in:
          type: integer
          description: Number of seconds before the token expires
          example: 1800
        refresh_token:
          type: string
          description: Token to use for obtaining a new access token using the refresh endpoint
          example: "verylong.refresh.token"
      required:
        - access_token
        - expires_in
        - refresh_token

    Error:
      description: General JSON representation for errors
      properties:
        code:
          description: Unique error code
          type: string
          example: "PropertyNotFound"
        trace:
          description: Unique code for tracing
          type: string
          format: uuid
          example: "de331408-ca4c-4e3f-9846-c6015c05bab7"

    OAuthError:
      description: Specific error for oAuth flows
      properties:
        error:
          description: Unique error code
          type: string
          enum:
            - invalid_request
            - invalid_client
            - invalid_grant
            - invalid_scope
            - unauthorized_client
            - unsupported_grant_type
        error_description:
          description: Human-readable description
          type: string
      required:
        - error
        - error_description

    iou:
      description: IOU data
      type: object
      properties:
        iou:
          type: object
          properties:
            id:
              type: string
              format: uuid
            payee:
              type: string
            issuer:
              type: string
            amount:
              type: number
              format: double
          required:
            - id
            - payee
            - issuer
            - amount
      required:
        - iou

  responses:
    oauth400:
      description: The oAuth request was invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OAuthError'

    oauth401:
      description: Authentication failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OAuthError'

    oauth500:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OAuthError'

    400:
      description: Request was invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    401:
      description: The user's credentials are incorrect.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    403:
      description: The user does not have access to this resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    404:
      description: The specified object could not be found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    500:
      description: Internal server error. In most cases the resulting content type will be application/json,
        but a text/plain response can happen.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
        text/plain:
          schema:
            type: string
            example: OutOfMemory

    amount200:
      description: the amount remaining to be paid off
      content:
        application/json:
          schema:
            properties:
              amount:
                type: number
                format: double
            required:
              - amount

  parameters:
    iouId:
      name: iouId
      in: path
      description: the system id of an IOU
      required: true
      schema:
        type: string
        format: uuid
    amount:
      name: amount
      in: path
      description: the amount remaining to be paid off
      required: true
      schema:
        type: number
        format: double
    payee:
      name: payee
      in: path
      description: the person the IOU is made out to
      required: true
      schema:
        type: string

security:
  - auth: [ ]

paths:
  /auth/login:
    post:
      summary: Log in to Seed project example service
      operationId: login
      tags:
        - Authentication
      security: [ ]
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  enum:
                    - password
                username:
                  type: string
                  example: 'payee1'
                password:
                  type: string
                  example: 'welcome1'
              required:
                - grant_type
                - username
                - password
      responses:
        200:
          description: Access token to use as Bearer auth in subsequent requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
        400:
          $ref: '#/components/responses/oauth400'
        401:
          $ref: '#/components/responses/oauth401'
        500:
          $ref: '#/components/responses/500'

  /auth/refresh:
    post:
      summary: Obtain a new access token after expiry
      operationId: refresh
      tags:
        - Authentication
      security: [ ]
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  enum:
                    - refresh_token
                refresh_token:
                  type: string
                  example: "verylong.refresh.token"
              required:
                - grant_type
                - refresh_token
      responses:
        200:
          description: Access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
        400:
          $ref: '#/components/responses/oauth400'
        401:
          $ref: '#/components/responses/oauth401'
        500:
          $ref: '#/components/responses/oauth500'

  /auth/logout:
    post:
      summary: Invalidate a previous login
      operationId: logout
      tags:
        - Authentication
      responses:
        200:
          description: Log out succeeded
        500:
          $ref: '#/components/responses/500'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  example: "verylong.refresh.token"
              required:
                - refresh_token

  /iou/{amount}/{payee}:
    post:
      summary: create a new IOU to pay the named payee
      operationId: createIouGen
      tags:
        - IOU
      parameters:
        - $ref: '#/components/parameters/amount'
        - $ref: '#/components/parameters/payee'
      responses:
        201:
          description: The IOU is successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iou'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        401:
          $ref: '#/components/responses/oauth401'
        500:
          $ref: '#/components/responses/oauth500'

  /iou/{iouId}/amountOwed:
    get:
      summary: get the amount owed
      operationId: getAmountOwedGen
      tags:
        - IOU
      parameters:
        - $ref: '#/components/parameters/iouId'
      responses:
        200:
          $ref: '#/components/responses/amount200'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        401:
          $ref: '#/components/responses/oauth401'
        500:
          $ref: '#/components/responses/oauth500'

  /iou/{iouId}/pay/{amount}:
    patch:
      summary: pay an amount off
      operationId: payGen
      tags:
        - IOU
      parameters:
        - $ref: '#/components/parameters/iouId'
        - $ref: '#/components/parameters/amount'
      responses:
        200:
          $ref: '#/components/responses/amount200'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        401:
          $ref: '#/components/responses/oauth401'
        500:
          $ref: '#/components/responses/oauth500'

  /iou/{iouId}/forgive:
    put:
      summary: forgive the whole debt
      operationId: forgiveGen
      tags:
        - IOU
      parameters:
        - $ref: '#/components/parameters/iouId'
      responses:
        204:
          description: debt forgiven
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        401:
          $ref: '#/components/responses/oauth401'
        500:
          $ref: '#/components/responses/oauth500'
