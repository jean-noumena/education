package seed

struct TimestampedAmount {
    amount: Number,
    timestamp: DateTime
};

function total(entries: List<TimestampedAmount>) returns Number {
    return entries.map(\(p: TimestampedAmount) returns Number -> p.amount).sum();
};

@api
protocol[issuer, payee] Iou(var forAmount: Number) {
    guard(forAmount > 0, "Initial amount must be strictly positive");

    initial state unpaid;
    final state paid;
    final state forgiven;

    private var payments = listOf<TimestampedAmount>();

    function amountOwed() returns Number {
        return forAmount - total(payments);
    };

    @api
    permission[issuer] pay(amount: Number) | unpaid {
        guard(amount > 0, "Amount must be strictly positive");
        guard(amount <= amountOwed(), "Amount may not exceed amount owed");

        var p = TimestampedAmount(
            amount = amount,
            timestamp = now()
        );

        payments = payments.with(p);

        if (amountOwed() == 0) {
            become paid;
        };
    };

    @api
    permission[payee] forgive() | unpaid {
        become forgiven;
    };

    @api
    permission[issuer | payee] getAmountOwed() returns Number {
        if (currentState == forgiven) {
            return 0;
        } else {
            return amountOwed();
        };
    };
}
